import json
import sys
import subprocess

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-eal")
parser.add_argument("-ado")
parser.add_argument("-n", help="Number of cells")
parser.add_argument("-path", help="a .txt file containing variant calling info for an experiment")
args = parser.parse_args()

EAL, ADO = args.eal, args.ado
PREDICTION_FILE = args.path
NUM_CELLS = int(args.n)

assert EAL in ["0", "0.2", "0.4"]
assert ADO in ["0", "0.2", "0.4"]

# EAL = sys.argv[1]
# ADO = sys.argv[2]
# NUM_CELLS = 20

def main():
    jsonPath = f"/data/ConbaseSimulatedSingleCell/simulation/sim_snv1_eal{EAL}_ado{ADO}/bams/sim_genVals.json"
    predictionFile = PREDICTION_FILE
    with open(jsonPath, 'r') as f:
        jsonData = json.loads(f.read())

    allVariants = generateVariantDict(predictionFile)
    results = {
        "TP": 0,
        "TN": 0,
        "FP": 0,
        "FN": 0
    }

    # key = chrom:pos
    visitedVariants = set()
    for key in jsonData:
        (chrom, pos) = key.split(":")
        fastaRef = getFastaRef(chrom, pos)
        truths = getTruths(jsonData, key, fastaRef)
        predictions = getPredictions(chrom, pos, allVariants)
        results = updateResults(truths, predictions, results)
        visitedVariants.add((chrom, pos))

    results = addUnexploredVariantsToFP(allVariants, visitedVariants, results)
    displayFinalResults(results)

def analyze():
    pass

def addUnexploredVariantsToFP(allVariants, visitedVariants, results):
    for variant in allVariants:
        if variant in visitedVariants:
            continue
        
        numSupportingCells = int(allVariants[variant]["numSupportingCells"])
        results["FP"] += numSupportingCells
        results["TN"] += (NUM_CELLS - numSupportingCells)

    return results

def updateResults(truths, predictions, results):

    for i in range(NUM_CELLS):
        t = truths[i]
        p = predictions[i]
        assert t == 0 or t == 1
        assert p == 0 or p == 1

        if t == p == 0:
            results["TN"] += 1
        elif t == p == 1:
            results["TP"] += 1
        elif t == 1 and p == 0:
            results["FN"] += 1
        else:
            results["FP"]

    return results

def getFastaRef(chrom, pos):
    bashCommand = f"samtools faidx /references/genomes/hg1k_37/human_g1k_v37.fasta {chrom}:{pos}-{pos}"
    outputFromFaidx = subprocess.check_output(bashCommand, shell=True, text=True)
    fastaRef = outputFromFaidx.split()[1]
    return fastaRef

def getTruths(jsonData, key, fastaRef):
    truths = []
    for cell in range(NUM_CELLS):
        ref = jsonData[key]['states'][f'cell{cell}']['Ref']
        mut = jsonData[key]['states'][f'cell{cell}']['Mut']
        if ref.split("_")[1] == mut.split("_")[1] == fastaRef:
            truths.append(0)
        else:
            truths.append(1)

    return truths

def getPredictions(chrom, pos, allVariants):
    if (chrom, pos) not in allVariants:
        return [0] * NUM_CELLS
    
    mask = allVariants[(chrom, pos)]["mask"]
    return list(map(int, mask.split()))

def generateVariantDict(predictionFile):
    variants = dict()
    f = open(predictionFile, 'r')
    f.readline() # skip header

    for line in f.readlines():
        lineAsList = line.strip().split('\t')
        chrom, pos, ref, alt, numSupportingCells, mask = lineAsList
        variants[(chrom, pos)] = {
            "ref": ref,
            "alt": alt,
            "numSupportingCells": numSupportingCells,
            "mask": mask
        }

    f.close()            
    return variants

def displayFinalResults(results):
    total = sum(results.values())
    totalCorrect = results["TP"] + results["TN"]
    accuracy = totalCorrect / total * 100
    sensitivity = results["TP"] / (results["TP"] + results["FN"]) * 100
    specificity = results["TN"] / (results["TN"] + results["FP"]) * 100
    print(results)
    print(f"{accuracy=:.4f}%")
    print(f"{sensitivity=:.4f}%")
    print(f"{specificity=:.4f}%")

main()
